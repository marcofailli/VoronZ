[include shell_command.cfg]

######################################################################
#####  Voron Design VoronZ 2.4 400mm Spider TMC2209 UART config  #####
######################################################################

# In loving memory of the original Anycubic Chiron that got taken
# apart to give birth to such a wonderful machine: The VoronZ



######################################################################
#   General
######################################################################


# Fysetc Spider as main MCU
[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" 
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_340014000B50315239323320-if00  


# CANBUS board as secondary MCU
[mcu EBBCan]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_3C0015000950415833323720-if00


# CANBUS input shaper accelerometer
[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: x,y,z

# Accelerometer position
[resonance_tester]  
accel_chip: adxl345  
probe_points:  
    200, 200, 100  # an example
hz_per_sec: 0.5

# Printer details
[printer]
kinematics: corexy
max_velocity: 500				#default =  300 mm/s
max_accel: 8000			    	#default = 3000 mm/ss
max_z_velocity: 35				#default =   20 mm/s
max_z_accel: 2000				#default =  500 mm/s
square_corner_velocity: 10.0	#default =  5.0 mm/s


# Virtual SD Card used to load gcodes in Fluidd / Mainsail
[virtual_sdcard]
#path:/home/mks/uploads
path: /home/mks/printer_data/gcodes

# Needed bu Fluidd
[display_status]


# Needed by Fluidd
[pause_resume]


[filament_switch_sensor e_stop]
pause_on_runout: False
runout_gcode:
    UPDATE_DELAYED_GCODE ID=CHECK_EMERGENCY DURATION=1 #trigger the delayed gcode below after 1 s
#    G4 P500
#    {% if printer["filament_switch_sensor e_stop"].filament_detected==false %}
#        {action_emergency_stop()}
#    {% endif %}
switch_pin: ^PC7
event_delay: 0.1
pause_delay: 0.1

[delayed_gcode CHECK_EMERGENCY]
initial_duration: 0
gcode:
    {% if printer["filament_switch_sensor e_stop"].filament_detected==false %}
        {action_emergency_stop()}
    {% endif %}


#####################################################################
#   Thermistors
#####################################################################


# TB - SSR temperature
[temperature_sensor relays]
sensor_type: Generic 3950
sensor_pin: PB0
max_temp: 80

# T3 - Power spply temperature
[temperature_sensor psu]
sensor_type: Generic 3950
sensor_pin: PC3
max_temp: 80


# T4 - Chamber temperature
[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PB1
max_temp: 60


# MKS Pi Board v1.1 - CPU temperature
[temperature_sensor mks_pi_board]
sensor_type: temperature_host
sensor_path:/sys/class/thermal/thermal_zone0/temp
max_temp: 100


# Fysetc SPider v3.0 - MCU temperature
[temperature_sensor fysetc_spider]
sensor_type: temperature_mcu
sensor_mcu: mcu
#   The micro-controller to read from. The default is "mcu".
sensor_temperature1: 80
sensor_adc1:0.26
#   Specify the above two parameters (a temperature in Celsius and an
#   ADC value as a float between 0.0 and 1.0) to calibrate the
#   micro-controller temperature. This may improve the reported
#   temperature accuracy on some chips. A typical way to obtain this
#   calibration information is to completely remove power from the
#   printer for a few hours (to ensure it is at the ambient
#   temperature), then power it up and use the QUERY_ADC command to
#   obtain an ADC measurement. Use some other temperature sensor on
#   the printer to find the corresponding ambient temperature. The
#   default is to use the factory calibration data on the
#   micro-controller (if applicable) or the nominal values from the
#   micro-controller specification.
#sensor_temperature2:
#sensor_adc2:
#   If sensor_temperature1/sensor_adc1 is specified then one may also
#   specify sensor_temperature2/sensor_adc2 calibration data. Doing so
#   may provide calibrated "temperature slope" information. The
#   default is to use the factory calibration data on the
#   micro-controller (if applicable) or the nominal values from the
#   micro-controller specification.

# Thermistors for beds and extruder are declared in their sections
max_temp: 130

# EBB36 - CANBUS Board temperature
[temperature_sensor EBB36]
sensor_type: temperature_mcu
sensor_mcu: EBBCan
max_temp: 100



#####################################################################
#   Heaters
#####################################################################

# HEAT0 - Large bed
[heater_generic large_bed]
heater_pin: PB15				#HEAT0
sensor_type: Generic 3950
sensor_pin: PC1					#T1
max_power: 0.8
min_temp: 0
max_temp: 130
control: pid
pid_kp: 58.015
pid_ki: 1.357
pid_kd: 620.040
pwm_cycle_time: 0.3

# Large bed thermal runout
[verify_heater large_bed]
max_error: 130
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 60
#   How many seconds between one temperature check and the following.
#	Default is 60s for beds and 30s for extruders
hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. The default is 5.
heating_gain: 1
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.


# HEAT1 - Small bed
[heater_generic small_bed]
heater_pin: PC8					#HEAT1
sensor_type: Generic 3950
sensor_pin: PC0					#T0
max_power: 0.25
min_temp: 0
max_temp: 130
control: pid
pid_kp: 33.766
pid_ki: 1.294
pid_kd: 220.325
pwm_cycle_time: 0.3

# Small bed thermal runout
[verify_heater small_bed]
max_error: 130
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 60
#   How many seconds between one temperature check and the following.
#	Default is 60s for beds and 30s for extruders
hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. The default is 5.
heating_gain: 1
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.





#####################################################################
#   Fan Control
#####################################################################


# FAN1 - Hotend fan
[heater_fan hotend_fan]
#pin: PA13
pin: EBBCan: PA1
max_power: 1.0
heater: extruder
heater_temp: 50.0

# FAN2 - Part cooling fan
[fan]
#pin: PA14
pin: EBBCan: PA0
max_power: 1.0
shutdown_speed: 1.0
kick_start_time: 0.2
off_below: 0.15

# FAN2 - Electronics bay fan
[controller_fan electronics_fan]
pin: PB2
max_power: 0.6
hardware_pwm: True
shutdown_speed: 1.0
kick_start_time: 0.2
off_below: 0.15
heater: extruder, small_bed, large_bed
stepper: stepper_x, stepper_y, stepper_z, stepper_z1, stepper_z2, stepper_z3, extruder

# FAN3 - Exhaust fan
[fan_generic exhaust_fan]
pin: PB5
max_power: 1.0
shutdown_speed: 1.0
kick_start_time: 0.2
off_below: 0.15

# FAN4 - Nevermore filter fan
[fan_generic nevermore_fan]
pin: PB6
max_power: 1.0
shutdown_speed: 1.0
kick_start_time: 0.2
off_below: 0.15

# FAN5 - PSU fan
[controller_fan psu_fan]
pin: PB7
max_power: 0.8
hardware_pwm: True
shutdown_speed: 1.0
kick_start_time: 0.2
off_below: 0.15
heater: extruder, small_bed, large_bed




#####################################################################
#   LED Control
#####################################################################


# BED OUT - Chamber LEDs
[output_pin caselight]
pin: PB4
pwm: false
value: 1.0
shutdown_value: 0


# Chamber LEDs ON button
[gcode_button led_button_on]
pin: ^PA2
press_gcode:
    Caselight_ON

# Chamber LEDs OFF button
[gcode_button led_button_off]
pin: ^!PA0
press_gcode:
    Caselight_OFF



#####################################################################
#   Endstops
#####################################################################

# X-max - Filament runout sensor
[filament_switch_sensor filament_runout_sensor]
pause_on_runout: True
runout_gcode:
    UPDATE_DELAYED_GCODE ID=CHECK_FILAMENT DURATION=0.5 #trigger the delayed gcode below after 1 s
    {% if printer["filament_switch_sensor filament_runout_sensor"].filament_detected==false %}
        PARK
        UNLOAD_FILAMENT
    {% endif %}
switch_pin: ^EBBCan:PB6

[delayed_gcode CHECK_FILAMENT]
initial_duration: 0
gcode:
    {% if printer["filament_switch_sensor filament_runout_sensor"].filament_detected==false %}
        PARK
        UNLOAD_FILAMENT
    {% endif %}



# Z-max - Clicky probe
[probe]
#pin: ^PA3
pin: ^EBBCan: PB9
x_offset: 0
y_offset: 19.75
#z_offset: 3.0 #Decrease for longer nozzle, increase for shorter nozzle
speed: 15
lift_speed: 15
samples: 3
samples_result: average
sample_retract_dist: 1.0
samples_tolerance: 0.1
samples_tolerance_retries: 3





#####################################################################
#   X/Y Stepper Settings
#####################################################################


# X-MOT (B Motor)
[stepper_x]
step_pin: PE11
dir_pin: !PE10
enable_pin: !PE9
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: 0

position_endstop: 400
position_max: 400
homing_speed: 100   #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PE7
interpolate: False
run_current: 1.1
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PB14
driver_SGTHRS: 148 #Homing sensitivity: 255 is most sensitive value, 0 is least sensitive

driver_TBL: 2
driver_TOFF: 2
driver_HEND: 1
driver_HSTRT: 4
driver_PWM_LIM: 8 
driver_PWM_GRAD: 8
driver_PWM_FREQ: 1
driver_PWM_REG: 4


# Y-MOT (A Motor)
[stepper_y]
step_pin: PD8
dir_pin: !PB12
enable_pin: !PD9
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: 0

position_endstop: 400
position_max: 400
homing_speed: 100  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PE15
interpolate: False
run_current: 1.1
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PB13
driver_SGTHRS: 173 #Homing sensitivity: 255 is most sensitive value, 0 is least sensitive





#####################################################################
#   Z Steppers Settings
#####################################################################


# M2 Stepper - Front Left
[stepper_z]
step_pin: PD14
dir_pin: !PD13
enable_pin: !PD15
rotation_distance: 39.92    #default = 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: probe:z_virtual_endstop

position_max: 310
position_min: -3
homing_speed: 10
second_homing_speed: 5
homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: PD10
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0


# M4 Stepper - Rear Left
[stepper_z1]
step_pin: PD5
dir_pin: PD6
enable_pin: !PD4
rotation_distance:  39.92
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z1]
uart_pin: PD7
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0


# M5 Stepper - Rear Right
[stepper_z2]
step_pin: PE2
dir_pin: !PE4
enable_pin: !PE3
rotation_distance:  39.92
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z2]
uart_pin: PC15
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0


# M6 Stepper - Front Right
[stepper_z3]
step_pin: PD12
dir_pin: PC4
enable_pin: !PE8
rotation_distance:  39.92
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z3]
uart_pin: PA15
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0





#####################################################################
#   Extruder
#####################################################################


[extruder]
#step_pin: PE1
#dir_pin: PE0
#enable_pin: !PC5
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
rotation_distance: 26.19
gear_ratio: 44:10
microsteps: 16
full_steps_per_rotation: 200
nozzle_diameter: 0.600
filament_diameter: 1.75
max_extrude_cross_section: 50
max_extrude_only_distance: 500
heater_pin: EBBCan: PB13
#heater_pin: PB3
sensor_type: Generic 3950
sensor_pin: EBBCan: PA3
#sensor_pin: PC2
min_temp: 0
max_temp: 320
max_power: 1
min_extrude_temp: 170
pressure_advance: 0.03		#tested by me
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721

[tmc2209 extruder]
#uart_pin: PD11
uart_pin: EBBCan: PA15
interpolate: false
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0


# Extruder thermal runout
[verify_heater extruder]
max_error: 250
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 60
#   How many seconds between one temperature check and the following.
#	Default is 60s for beds and 30s for extruders
hysteresis: 10
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. The default is 5.
heating_gain: 1
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.





#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################


# Bed mesh measurement
[bed_mesh]
speed: 500
mesh_min: 20, 20
mesh_max: 380, 380
probe_count: 5, 5
algorithm: bicubic
horizontal_move_z: 10


# Printer on idle timeout
[idle_timeout]
timeout: 300
gcode:
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0


# Quad gantry level
[quad_gantry_level]
gantry_corners: #I set the posizion of the inner corners of the extrusions
   -63,-22
   461,501

points:
   50,25
   50,325
   350,325
   350,25
speed: 500
horizontal_move_z: 10
retries: 2
retry_tolerance: 0.1
max_adjust: 10


[servo klicky_servo]
pin: PD3
maximum_servo_angle: 190


# Skew correction on XY, XZ and YZ
[skew_correction]


# Exclude failed portions of print
[exclude_object]





##########################################################	
########################  Macros  ########################
##########################################################




########################################################
#   Toolhead park macro
########################################################
[gcode_macro PARK]
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y5 F6000                                     ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        SET_IDLE_TIMEOUT TIMEOUT=60                                                          ; set timeout to 1 minute
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %} 



########################################################
#   Print start macro
########################################################
[gcode_macro PRINT_START]
# Variable for adaptive bed besh
variable_buffer: 20
gcode:
	# This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
	{% set target_bed = params.BED|int %}
	{% set heat = params.HEAT|int %}
	{% set target_extruder = params.EXTRUDER|int %}
    {% set pa = params.PR_ADV|float %}

    # Set pressure advance based on filament from slicer
    SET_PRESSURE_ADVANCE ADVANCE={ pa }

    # Choosing what bed to use: 0 = Large Bed, 1 = Small Bed
    {% if heat == 0 %}
        {% set what_bed = "large_bed" %}
        # Preheating the bed
        SET_HEATER_TEMPERATURE HEATER={ what_bed } TARGET={ target_bed } # Sets the target temp for the bed
    {% elif heat == 1 %}
        {% set what_bed = "small_bed" %}
        # Preheating the bed
#        SET_HEATER_TEMPERATURE HEATER=large_bed TARGET={ target_bed - 25 } # Sets the target temp for the bed
        SET_HEATER_TEMPERATURE HEATER={ what_bed } TARGET={ target_bed + 20 } # Sets the target temp for the bed
    {% endif %}

	# Turn on Nevermore filter fan if the bed temperature is over that of PET-G
	{% if target_bed >= 85 %}
		SET_FAN_SPEED FAN=nevermore_fan SPEED=1
	{% else %}
		SET_FAN_SPEED FAN=nevermore_fan SPEED=0
	{% endif %}

    # Homing
	STATUS_HOMING												# Sets SB-leds to homing-mode
	G28 X Y                  									# Homing X Y
    Attach_Probe_lock                                           # Attach klicky probe
    G28 Z                                                       # Homing Z (do not release klicky)
	G90                   										# Absolut position

	# Quad gantry level
	BED_MESH_CLEAR       										# Clears old saved bed mesh (if any)
	STATUS_LEVELING												# Sets SB-leds to leveling-mode
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("QG Level") }
    {% endif %}
    _CheckProbe action=query
	G90
    _QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}
    G28 Z														# Homes Z again after QGL

    # Waiting to reach bed temperature
    STATUS_HEATING												# Sets SB-leds to heating-mode
 	TEMPERATURE_WAIT SENSOR="heater_generic { what_bed }" MINIMUM={ target_bed - 5 } MAXIMUM={ target_bed + 100 }	# Waits for bed to heat up

    # Adaptive ed meshing
	STATUS_MESHING                     							# Sets SB-leds to bed mesh-mode

    {% if params.FORCE_NEW_MESH != null %}
        { action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }
    {% endif %}
    {% if printer["bed_mesh"].profile_name == '' %}
        { action_respond_info("No existing bed mesh found.") }
        {% set last_area_end_x=-1 %}
    {% endif %}

    {% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
    {% if params.PRINT_MIN %}
        { action_respond_info("print_min: %s" % params.PRINT_MIN) }
        { action_respond_info("print_max: %s" % params.PRINT_MAX) }                
        {% set probeConfig = printer['configfile'].config["probe"] %}
        {% if probeConfig %}
            {% set OffsetX = probeConfig.x_offset|default(0)|float %}
            {% set OffsetY = probeConfig.y_offset|default(0)|float %}
        {% endif %}

        {% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
        {% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
        {% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
        {% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}

        {% if klicky_available %}
            _CheckProbe action=query
            Attach_Probe
        {% endif %}
        {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

            # Get bed_mesh config (probe count, mesh_min and mesh_max for x and y
            {% set bedMeshConfig = printer['configfile'].config["bed_mesh"] %}
            {% set minimum_probe_count = 4 %}
            {% if bedMeshConfig.algorithm == "bicubic" %}
                {% set minimum_probe_count = 4 %}
            {% endif %}
            {% set probe_count = bedMeshConfig.probe_count.split(",") %}
            {% set probe_count_x = probe_count[0]|int %}
            {% if probe_count.__len__() > 1 %}
                {% set probe_count_y = probe_count[1]|int %}
            {% else %}
                {% set probe_count_y = probe_count_x|int %}
            {% endif %}
            {% set relative_reference_index = bedMeshConfig.relative_reference_index %}
            {% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
            {% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
            {% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
            {% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

            # If print area X is smaller than 50% of the bed size, change to to 3 probe counts for X instead of the default 
            {% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}
                {% set probe_count_x = minimum_probe_count %}
            {% endif %}

            # If print area Y is smaller than 50% of the bed size, change to to 3 probe counts for Y instead of the default 
            {% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}
                {% set probe_count_y = minimum_probe_count %}
            {% endif %}

            {% if print_min_x - buffer >= mesh_min_x %}
                {% set mesh_min_x = print_min_x - buffer %}
            {% endif %}

            {% if print_min_y - buffer >= mesh_min_y %}
                {% set mesh_min_y = print_min_y - buffer %}
            {% endif %}

            {% if print_max_x + buffer <= mesh_max_x %}
                {% set mesh_max_x = print_max_x + buffer %}
            {% endif %}

            {% if print_max_y + buffer <= mesh_max_y %}
                {% set mesh_max_y = print_max_y + buffer %}
            {% endif %}

            { action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
            { action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
            { action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }

            {% if printer["gcode_macro status_meshing"] != null %}
                status_meshing
            {% endif %}

            {% if relative_reference_index == 0 or relative_reference_index == null %}
                _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
            {% else %}
                {% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
                { action_respond_info("relative_reference_index: %s" % relative_reference_index) }
                _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
            {% endif %}
        {% else %}
            {% if printer["gcode_macro status_meshing"] != null %}
                status_meshing
            {% endif %}
            _BED_MESH_CALIBRATE
        {% endif %}
            {% if klicky_available %}
                Dock_Probe_unlock
            {% endif %}

    {% else %}
        {% if klicky_available %}
            _CheckProbe action=query
            Attach_Probe
        {% endif %}
        {% if printer["gcode_macro status_meshing"] != null %}
            status_meshing
        {% endif %}
        _BED_MESH_CALIBRATE
        {% if klicky_available %}
            Dock_Probe_unlock
        {% endif %}
    {% endif %}
    {% if printer["gcode_macro status_ready"] != null %}
        status_ready
    {% endif %}

    # Heat-up the extruder
    G1 X200 Y200 Z15 F30000							# Goes to center of the bed
	STATUS_HEATING												# Sets SB-leds to heating-mode

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={ target_extruder } # Sets the target temp for the extruder
 	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ target_extruder - 10 } MAXIMUM={ target_extruder + 20 }	# Waits for extruder to heat up

    # Eventually turn on exhaust fan
	{% if target_bed >= 85 %}
		SET_FAN_SPEED FAN=exhaust_fan SPEED=0.7
	{% else %}
		SET_FAN_SPEED FAN=exhaust_fan SPEED=0.3
	{% endif %}

    # Start printing
	STATUS_PRINTING												# Sets SB-leds to printing-mode
	G0 X400 Y250 F30000									# Moves to starting point
	G0 Z1														# Raises Z to 1
	G91															# Incremental positioning 
	G1 Y-100 E20 F1000											# Purge line
	G90															# Absolut position
    SKEW_PROFILE LOAD=CaliFlower

  
########################################################
#   Print end macro
########################################################
[gcode_macro PRINT_END]
gcode:
    SET_PIN PIN=caselight VALUE=1

    # Safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SET_SKEW CLEAR=1
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400														# Wait for buffer to clear
    G92 E0														# Zero the extruder
    G1 E-5.0 F1800												# Retract filament
    
	G91															# Relative positioning
	G0 Z1														# Lift Z by 1mm
	G90															# ABsolute positioning
	G0 X390 Y390												# Move toolhead away

    TURN_OFF_HEATERS											# Turn off heaters
    M84															# Disable motors
    M107														# Turn off fan


    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    G4 P30000                                                   #wait 30s
    Caselight_OFF
    SET_FAN_SPEED FAN=nevermore_fan SPEED=0
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0



########################################################
#   Pause print macro
########################################################
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}



########################################################
#   Resume print macro
########################################################
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}



########################################################
#   Cancel print macro
########################################################
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT



########################################################
#   Filament macros
########################################################
[gcode_macro LOAD_FILAMENT]
variable_load_distance:  72
variable_purge_distance:  25
gcode:
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F1500 # fast-load
    G1 E{purge_distance} F300 # purge
    RESTORE_GCODE_STATE NAME=load_state



[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  80
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E-{unload_distance} F1500 # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state



########################################################
#   Caselight macros
########################################################
[gcode_macro Caselight_OFF]
gcode:
    SET_PIN PIN=caselight VALUE=0
    set_nozzle_leds_off

[gcode_macro Caselight_ON]
gcode:
    SET_PIN PIN=caselight VALUE=1
    set_nozzle_leds_on


########################################################
#   Replace M140
########################################################
[gcode_macro M140]
gcode:
    {% set s = params.S|float %}
    SET_HEATER_TEMPERATURE HEATER=large_bed TARGET={ s }



##########################################################	
#######################  Include  ########################
##########################################################


# Sensorless homing
[include sensorless.cfg]


# Klicky Z-Probe
[include klicky-probe.cfg]


# Stealtburner Neopixel LEDs
[include stealthburner_leds.cfg]


[include K-ShakeTune/*.cfg]

#[include timelapse.cfg]


##########################################################	
#####################  SAVE_CONFIG  ######################
##########################################################

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [small_bed]
#*# control = pid
#*# pid_kp = 33.766
#*# pid_ki = 1.294
#*# pid_kd = 220.325
#*#
#*# [extruder]
#*# pid_kp = 13.975
#*# pid_ki = 0.634
#*# pid_kd = 77.037
#*# control = pid
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.415002, 0.268213, 0.234114, 0.278608
#*# 	  0.280272, 0.157185, 0.123087, 0.181303
#*# 	  0.175898, 0.077345, 0.070276, 0.106038
#*# 	  0.140968, 0.024118, 0.013307, 0.049900
#*# tension = 0.2
#*# min_x = 36.52
#*# algo = bicubic
#*# y_count = 4
#*# mesh_y_pps = 2
#*# min_y = 38.260000000000005
#*# x_count = 4
#*# max_y = 190.73
#*# mesh_x_pps = 2
#*# max_x = 249.49
#*#
#*# [large_bed]
#*# control = pid
#*# pid_kp = 58.015
#*# pid_ki = 1.357
#*# pid_kd = 620.040
#*#
#*# [probe]
#*# z_offset = 2.930
#*#
#*# [input_shaper]
#*# shaper_type_x = zv
#*# shaper_freq_x = 22.8
#*# shaper_type_y = zv
#*# shaper_freq_y = 27.8
#*#
#*# [skew_correction CaliFlower]
#*# xy_skew = 0.0009415608496742201
#*# xz_skew = 0.0
#*# yz_skew = 0.0
